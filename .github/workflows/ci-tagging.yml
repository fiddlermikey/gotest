name: Release Workflow

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - release-[0-9]*.[0-9]*  # Replace with your release branch pattern

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Determine PR state and base branch
        id: pr-info
        if: github.event_name == 'pull_request'  # Ensure this runs only for pull request events
        uses: actions/github-script@v5
        with:
          script: |
            const PR_EXISTS = ${{ github.context.payload.pull_request.state }};
            PR_EXISTS == '' ? const PR_STATE = 'empty' : const PR_STATE = PR_EXISTS
            const BASE_REF = ${{github.context.payload.pull_request.base.ref}};
            core.setOutput('pr-state', PR_STATE);
            core.setOutput('base-ref', BASE_REF);

      - name: Determine latest release tag
        if: steps.pr-info.outputs.pr-state != 'closed'
        id: latest-release
        run: |
          const prState = ${{steps.pr-info.outputs.pr-state}};
          const baseRef = ${{steps.pr-info.outputs.base-ref}};
          //if (prState === 'open') {
          //  // PR is open, find the latest release tag
          //  const tags = github.repos.listTags({
          //    owner: github.context.repo.owner,
          //    repo: github.context.repo.repo,
          //    per_page: 100,
          //  });
          ////  const latestTag = tags.data.find(tag => tag.name.startsWith(baseRef + '.'));
          //  if (latestTag) {
          //    // Increment rc.n or create rc.0 if not found
          //    const latestVersion = latestTag.name;
          //    const versionParts = latestVersion.split('.');
          //    versionParts[2] = (parseInt(versionParts[2]) + 1).toString();
          //    core.setOutput('new-tag', versionParts.join('.'));
          //  } else {
          //    // No release tags found, create rc.0
          //    core.setOutput('new-tag', baseRef + '.rc.0');
          //  }
          //} else {
          //  // PR is not open (merged or closed), get the latest rc.n value
          //  const tags = github.repos.listTags({
          //    owner: github.context.repo.owner,
          //    repo: github.context.repo.repo,
          //    per_page: 100,
          //  });
          //  const latestRcTag = tags.data.find(tag => tag.name.startsWith(baseRef + '.rc.'));
          //  if (!latestRcTag) {
          //    throw new Error(`No release candidate tags found for ${baseRef}`);
          //  }
          //  // Remove .rc* to create the final release tag
          //  core.setOutput('new-tag', latestRcTag.name.replace(/\.rc.*/, ''));
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Modify version.go file (Replace with actual command)
        if: ${{ needs.pr-info.outputs['pr-state'] != 'closed' }}
        run: |
          # Modify version.go file to update the version
          sed -i 's/const Version = ".*"/const Version = "${{ steps.latest-release.outputs.new-tag }}"/' version.go
          echo "Version updated to ${{ steps.latest-release.outputs.new-tag }}"
        shell: bash

      - name: Create and push new release tag
        if: ${{ needs.pr-info.outputs['pr-state'] != 'closed' }}
        run: |
          git tag ${{ steps.latest-release.outputs.new-tag }}
          git push origin ${{ steps.latest-release.outputs.new-tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}